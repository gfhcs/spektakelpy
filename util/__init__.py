

def check_type(x, t, msg=None, allow_none=False):
    """
    Raises a TypeError if the given value is not of the given type.
    :param x: The value the type of which is to be checked.
    :param t: The type that the value is supposed to have.
    :param msg: The message for the TypeError to be thrown. A generic message is generated by default.
    :param allow_none: Specifies if None values for x should pass the check.
    :return: The value x.
    """
    if not (isinstance(x, t) or (x is None and allow_none)):
        raise TypeError("{x} is of type {f}, but type {e} was expected!".format(x=x, f=type(x), e=t))

    return x


def check_types(xs, t, msg=None, allow_none=False):
    """
    Raises a TypeError if any of the given values is not of the given type.
    :param xs: An iterable of values the types of which are to be checked.
    :param t: The type that the values are supposed to have.
    :param msg: The message for the TypeError to be thrown. A generic message is generated by default.
    :param allow_none: Specifies if None values for x should pass the check.
    :return: The iterable xs.
    """
    return [check_type(x, t, msg=msg, allow_none=allow_none) for x in xs]
