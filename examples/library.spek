

class ListIterator:

    var _data

    def __init__(data):
        self._data = data

    def __next__():

        if self._data is None:
            # STOP is an externally defined name, for the purpose of signalling the end of an iteration.
            return STOP

        item, data = self._data
        self._data = data
        return item


class List:
    """
    A list has a head item and a tail list (possibly empty).
    """

    var _data = None


    def __iter__():
        return ListIterator(self._data)

    def push(item):
        self._data = (item, self._data)

    def item(index):
        for item in self:
            if index == 0:
                return item
            else:
                index = index - 1

    def pop():
        item, data = self._data
        self._data = data
        return item

class Spektakel:

    var _visuals = List()
    var _next = None

    def add(visual):
        """
        Adds the given visual content to this spektakel, such that it can be rendered.
        """
        self._visuals.push(visual)

    prop framerate:
        """
        The framerate at which this spektakel is to be rendered.
        """
        get:
            return self._fps
        set fps:
            self._fps = fps

    def next():
        """
        Blocks until the user issues the 'NEXT' command.
        """
        # NEXT is an action label, defined externally. It is completely opaque in spek, just an object with no
        # useful members.
        await NEXT

    def sleep(seconds):
        """
        Blocks for precisely the given amount of seconds (up to imprecisions arising from the framerate).
        """
        var time = TIME
        while TIME < time + seconds:
            await TICK

var spektakel = Spektakel()

def range(n):
    """
    Returns an iterable of all natural numbers smaller than 'n'.
    """
    r = List()
    while n > 0:
        r.push(n - 1)
        n = n - 1
    return r


class Text:
    """
    A visual displaying text.
    """

    var _text

    def __init__(text):
        """
        Creates a new Text visual.
        :param text: The text to display in this visual.
        """
        self._text = text

    prop text:
        """
        The text displayed in this visual.
        """
        get:
            return self._text
        set text:
            self._text = text

class Wrapper:
    """
    Wrapper objects 'inherit' all the members of the object they wrap.
    """

    var _inner

    def __init__(inner):
        self._inner = inner

    def __getattr__(self, name):
        try:
            return super().__getattr__(name)
        except AttributeError:
            return getattr(self._inner, name)


class Located(Wrapper):
    """
    Equips a visual with a location inside its container.
    """

    var _cx, _cy

    def __init__(inner, cx, cy):
        """
        Equips a visual with a location.
        :param inner: The visual to locate.
        :param cx: The relative x coordinate (range 0 to 1) of the center of the inner widget inside its container
        :param cy: The relative y coordinate (range 0 to 1) of the center of the inner widget inside its container
        """
        super().__init__(inner)
        self._cx = cx
        self._cy = cy

    prop cx:
        """
        The relative x coordinate (range 0 to 1) of the center of the inner widget inside its container
        """
        get:
            return self._cx
        set cx:
            self._cx = cx

    prop cy:
        """
        The relative y coordinate (range 0 to 1) of the center of the inner widget inside its container
        """
        get:
            return self._cy
        set cy:
            self._cy = cy

class Alpha(Wrapper):
    """
    Controls the transparency of its inner node.
    """

    var _alpha

    def __init__(inner, alpha):
        """
        Equips a visual with an alpha factor.
        :param inner: The visual the transparency of which is to be adjusted.
        :param alpha: A fraction to be multiplied with the alpha components of the inner node.
        """
        super().__init__(inner)
        self._alpha = alpha

    prop alpha:
        """
        The alpha factor modulating the transparency of the node.
        """
        get:
            return self._alpha
        set alpha:
            self.alpha = alpha